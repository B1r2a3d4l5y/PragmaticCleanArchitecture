@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <div style="display: flex; align-items: center;">
                        <div class="circle-chip">
                            <i class="bi bi-person"></i>
                        </div>
                        <a href="authentication/profile" class="username">
                            @_userName
                        </a>
                    </div>
                    <button class="btn btn-primary float-end" @onclick="Logout">
                        Logout
                    </button>

                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string? _userName = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user?.Identity?.IsAuthenticated == true)
            {
                _userName = user.FindFirst(ClaimTypes.Name)?.Value
                    ?? user.FindFirst("name")?.Value
                    ?? user.Identity.Name;
            }
            else
            {
                _userName = "Guest";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing authentication state: {ex.Message}");
            _userName = "Error";
        }
    }

    private Task Logout()
    {
        Navigation.NavigateTo("Identity/Account/Logout", forceLoad: true);
        return Task.CompletedTask;
    }
}